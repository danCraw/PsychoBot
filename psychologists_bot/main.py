import ast
import logging
import os
import sys

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove


ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(ROOT)

from psychologists_bot.bot_events import start_bot, stop_bot
from psychologists_bot.bot.keyboards.inline import KB_SELECT_PSYCHOLOGIST
from psychologists_bot.bot.keyboards.reply import KB_START_BOT, KB_BEGIN, KB_SELECT_PSYCHO
from core.bot_config import config
from db.repositories.client import ClientRepository
from db.repositories.meet import MeetRepository
from db.repositories.psychologists import PsychologistRepository
from db.repositories.schedule import ScheduleRepository
from db.repositories.tariff import TariffRepository

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=config.BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç üòâ.\n–Ø - –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å –ª–∏—á–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. ' + config.ADMIN_TEXT + '\n–ù–∞–∂–º–∏ <b>"–ù–∞—á–∞—Ç—å"</b>, —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –≤—ã–±–æ—Ä—É',
        reply_markup=KB_START_BOT)


@dp.message_handler(commands=['support', 'help'])
async def cmd_help(message: types.Message):
    await message.answer(config.ADMIN_TEXT)


@dp.message_handler(commands=['psychologists'])
async def cmd_psychologists(message: types.Message):
    await psychologists(message)


@dp.message_handler(commands=['tariffs'])
async def cmd_tariffs(message: types.Message):
    await tariffs(message)


@dp.message_handler(commands=['meets'])
async def cmd_meets(message: types.Message):
    await client_meets(message)


@dp.pre_checkout_query_handler()
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@dp.message_handler(regexp='–ù–∞—á–∞—Ç—å')
async def begin(message: types.Message):
    await message.answer(
        '''<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ –µ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π</b>\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ!\n–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –≤ —Å–ª—É—á–∞ —á–µ–≥–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é –∏ –ø–æ–º–µ–Ω—è—Ç—å —Å–≤–æ—ë –≤—ã–±–æ—Ä.üòâ\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–≤—ã–±—Ä–∞—Ç—å"''',
        reply_markup=KB_BEGIN)


@dp.message_handler(regexp='–í—ã–±—Ä–∞—Ç—å üîé')
async def psychologists(message: types.Message):
    psychologist_repo: PsychologistRepository = PsychologistRepository()
    psychologists = await psychologist_repo.list()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç üòâ',
                         reply_markup=ReplyKeyboardRemove())
    await message.answer('–ü—Å–∏—Ö–æ–ª–æ–≥–∏', reply_markup=ReplyKeyboardRemove())
    for psychologist in psychologists:
        try:
            KB_SELECT_PSYCHOLOGIST.inline_keyboard[0][0].callback_data = str({'chosen': {'id': psychologist.id, 'n': psychologist.name, 'p': psychologist.meet_price}})
            with open('/' + psychologist.photo, 'rb') as photo:
                await message.answer_photo(photo,
                                           caption='<b>' + psychologist.name + '. –í–æ–∑—Ä–∞—Å—Ç ' + str(
                                               psychologist.age) + '. ' + str(psychologist.meet_price) + '—Ä –∑–∞ —Å–µ–∞–Ω—Å.</b>\n' + psychologist.description,
                                           reply_markup=KB_SELECT_PSYCHOLOGIST)
        except FileNotFoundError as e:
            logging.warning(psychologist.tg_link, psychologist.name, e)


@dp.callback_query_handler(regexp='chosen')
async def save_user_request(call: types.CallbackQuery):
    await call.message.answer('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üòä')
    chosen_psychologist = ast.literal_eval(call.data)['chosen']
    psychologist_id, psychologist_name, psychologists_meet_price = chosen_psychologist['id'], chosen_psychologist['n'],\
                                                                   chosen_psychologist['p']
    if call.message.chat.username is None:
        await bot.send_message(call.message.chat.id,
                               f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å, –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø—Å–∏—Ö–æ–ª–æ–≥—É, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n{config.ADMIN_TEXT}')
    for id in config.ADMINS_IDS:
        await bot.send_message(id, f'@{call.message.chat.username} –æ—Å—Ç–∞–≤–∏–ª –∑–∞—è–≤–∫—É –Ω–∞ –∑–∞–ø–∏—Å—å –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É id: {psychologist_id} name: {psychologist_name}')


async def client_meets(message: types.Message):
    client_repo: ClientRepository = ClientRepository()
    client = await client_repo.get(str(message.chat.id))
    await message.answer(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∞–Ω—Å–æ–≤: {client.remaining_meets}') if client and client.remaining_meets else\
        await message.answer('–í—ã –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∞–Ω—Å–æ–≤ üòî')


@dp.callback_query_handler(regexp='set_tariff')
async def set_tariff(call: types.CallbackQuery):
    selected_tariff_data = ast.literal_eval(call.data)['set_tariff']
    selected_tariff_name = selected_tariff_data['name']
    tariffs_repo: TariffRepository = TariffRepository()
    selected_tariff = await tariffs_repo.get(selected_tariff_name)
    await call.message.answer(
        '–í—ã –≤—ã–±—Ä–∞–ª–∏: ' + selected_tariff.name + '\n–ï—Å–ª–∏ –≤–∞—Å –≤—Å—ë —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –≤—ã–±–æ—Ä—É –ø—Å–∏—Ö–æ–ª–æ–≥–∞', reply_markup=KB_SELECT_PSYCHO)


@dp.message_handler()
async def undefined(message: types.Message):
    await message.answer(
        '–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã üôÅ. \n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥ –∏–∑ –º–µ–Ω—é')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=start_bot, on_shutdown=stop_bot)
